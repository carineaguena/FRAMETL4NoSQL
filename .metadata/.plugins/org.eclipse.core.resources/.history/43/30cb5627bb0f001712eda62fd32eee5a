'''
Created on 20 de mar de 2017

@author: carineaguena
'''
#Responsible for create the sample basead on schema

from NoSQL_Invetory.SchemaDataColumnFamily import SchemaDataColumnFamily
from NoSQL_Invetory.SchemaDataDocument import SchemaDataDocument
from NoSQL_Invetory.SchemaDataGraph import SchemaDataGraph
from NoSQL_Invetory.SchemaDataKeyValue import SchemaDataKeyValue


class Sample:
    
    #metodo para fazer a leitura de values e separar para adicionar os valores no esquema
    def createSample(self):
        paradigma = input("Escolha o paradigma 1 2 3 4: ")
        #identifica o tipo de esquema e grava o que deve ser importado
        if paradigma == 1:
                name = raw_input("Nome do esquema: ")
                descricao = raw_input("Descricao do esquema: ")

                if __name__ == '__main__':
                    schema_type = "SchemaDataColumnFamily"
                    schema = eval(schema_type)(name, descricao)
                    print("Criando esquema..", type(schema).__name__)
        else:
            if paradigma==2:
               name = raw_input("Nome do esquema: ")
                descricao = raw_input("Descricao do esquema: ")

                if __name__ == '__main__':
                    schema_type = "SchemaDataDocument"
                    schema = eval(schema_type)(name, descricao)
                    print("Criando esquema..", type(schema).__name__)
            else:
                if isinstance(self.schema, SchemaDataGraph):
                    while response != 'y':
                        node = raw_input("Digit node:")
                        self.schema.putNodes(node)
                        finish = raw_input("finish? [y / n]: ")
                        if finish == 'y':
                            break;
                else:
                    if isinstance(self.schema, SchemaDataKeyValue):
                        while response != 'y':
                            key = raw_input("Digit Key: ")
                            value = raw_input("Digit Value: ")
                            self.schema.putPairs(key+value)
                            finish = raw_input("finish? [y / n]: ")
                            if finish == 'y':
                                break;
                    
                
    def getSample(self):
        return self.schema
    
    def setSample(self):
        pass   